component time "Time on in Hours, Minutes, Seconds";

description 
"""
Time

When either the *time*._N_.*start* or *time*._N_.*pause* bits goes true the
cycle timer resets and starts to time until *time*._N_.*start* AND *time*._N_.*pause*
go false. When the *time*._N_.*pause* bit goes true timing is paused
until *time*._N_.*pause* goes false. If you connect *time*._N_.*start*
to *halui*.*program*.*is-running* and leave *time*._N_.*pause* unconnected the
timer will reset during a pause. See the example connections below for more
information.

Time returns the hours, minutes, and seconds that *time*._N_.*start* is true.

Sample PyVCP code to display the hours:minutes:seconds.

[source,xml]
----
<pyvcp>
  <hbox>
  <label>
    <text>"Cycle Time"</text>
    <font>("Helvetica",14)</font>
  </label>
  <u32> 
      <halpin>"time-hours"</halpin>
      <font>("Helvetica",14)</font>
      <format>"2d"</format>
  </u32>
  <label>
    <text>":"</text>
    <font>("Helvetica",14)</font>
  </label>
  <u32> 
      <halpin>"time-minutes"</halpin>
      <font>("Helvetica",14)</font>
      <format>"2d"</format>
  </u32>
  <label>
    <text>":"</text>
    <font>("Helvetica",14)</font>
  </label>
  <u32> 
      <halpin>"time-seconds"</halpin>
      <font>("Helvetica",14)</font>
      <format>"2d"</format>
  </u32>
  </hbox>
</pyvcp>
----

In your `post-gui.hal` file you might use one of the following to connect
this timer:
 
For a new config:
 
[source,hal]
----
 loadrt time
 addf time.0 servo-thread
 net cycle-timer        time.0.start <= halui.program.is-running
 net cycle-timer-pause  time.0.pause <= halui.program.is-paused
 net cycle-seconds pyvcp.time-seconds <= time.0.seconds
 net cycle-minutes pyvcp.time-minutes <= time.0.minutes
 net cycle-hours pyvcp.time-hours <= time.0.hours
----

Previous to this version if you wanted the timer to continue running
during a pause instead of resetting, you had to use a HAL NOT component
to invert the *halui*.*program*.*is-idle* pin and connect
to *time*._N_.*start* as shown below:

[source,hal]
----
 loadrt time
 loadrt not
 addf time.0 servo-thread
 addf not.0 servo-thread
 net prog-running not.0.in <= halui.program.is-idle
 net cycle-timer time.0.start <= not.0.out
 net cycle-seconds pyvcp.time-seconds <= time.0.seconds
 net cycle-minutes pyvcp.time-minutes <= time.0.minutes
 net cycle-hours pyvcp.time-hours <= time.0.hours
----

For those who have this setup already, you can simply add a net
connecting *time*._N_.*pause* to *halui*.*program*.*is-paused*:

[source,hal]
----
 net cycle-timer-pause time.0.pause <= halui.program.is-paused
----

""";
 
author "John Thornton, itaib, Moses McKnight";

license "GPL";

// Input Pins
pin in bit start "Timer On";
pin in bit pause = 0 "Pause";

// Output Pins
pin out unsigned seconds "Seconds";
pin out unsigned minutes "Minutes";
pin out unsigned hours "Hours";

// Global Variables
variable unsigned totalnsec;
variable int old_start;

function _;

;;

#include "rtapi_math.h"

FUNCTION(_) {
    rtapi_u64 totalseconds;
    int running = start | pause;
    if(running && !old_start) totalnsec = 0;

    if(start && !pause){
    totalnsec = totalnsec + period;
    totalseconds = totalnsec / 1000000000;
    seconds = totalseconds % 60;
	minutes = (totalseconds / 60) % 60;
	hours = (totalseconds / 3600);
	}
	old_start = running;
}

