component ilowpass "Low-pass filter with integer inputs and outputs";
description """While it may find other applications, this component was written
to create smoother motion while jogging with an MPG.

In a machine with high acceleration, a short jog can behave almost like a step
function.  By putting the *ilowpass* component between the MPG
encoder *counts* output and the axis *jog-counts* input,
this can be smoothed.

Choose *scale* conservatively so that during a single session
there will never be more than about 2e9 / *scale* pulses seen
on the MPG.  Choose *gain* according to the smoothing level
desired.  Divide the **axis**.__N__.**jog-scale** values by
*scale*.""";

pin in signed in;
pin out signed out """*out* tracks *in* * *scale* through a low-pass
filter of *gain* per period.""";

param rw float scale = 1024 """A scale factor applied to the output
value of the low-pass filter.""";

param rw float gain = .5 """Together with the period, sets the rate at
which the output changes.  Useful range is between 0 and 1, with higher
values causing the input value to be tracked more quickly.  For
instance, a setting of 0.9 causes the output value to go 90% of the way
towards the input value in each period.""";

variable double value;

option period no;
function _ "Update the output based on the input and parameters.";

license "GPL";
author "Jeff Epler";
;;
#include <rtapi_math.h>

FUNCTION(_) {
    value += (in - value) * gain;
    out = (rtapi_s64)floor((value * scale) + 0.5);
}
