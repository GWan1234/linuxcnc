component orient "Provide a PID command input for orientation mode based on current spindle position, target angle and orient mode";

pin in  bit   enable      "enable angular output for orientation mode";
pin in  signed   mode        "0: rotate - shortest move; 1: always rotate clockwise; 2: always rotate counterclockwise";
pin in  float position    "spindle position input, unit 1 rev";
pin in  float angle       "orient target position in degrees, 0 â‰¤ angle < 360";
pin out float command     "target spindle position, input to PID command";
pin out float poserr      "in degrees - aid for PID tuning";
pin out bit is-oriented   "This pin goes high when poserr < tolerance. Use to drive spindle.N.is-oriented";
pin in float tolerance = 0.5  "The tolerance in degrees for considering the align completed";

variable int   last_enable = 0;
variable int    debounce = 0; // to prevent the in-position triggering with the spindle moving

option fp yes;
option period no;

function _ "Update *command* based on *enable*, *position*, *mode* and *angle*.";
author "Michael Haberler";


description """
This component is designed to support a spindle orientation PID loop by
providing a command value, and fit with the motion spindle-orient support pins
to support the M19 code.

The spindle is assumed to have stopped in an arbitrary position. The spindle
encoder position is linked to the *position* pin.  The current value of the
position pin is sampled on a positive edge on the *enable* pin, and *command*
is computed and set as follows: +
floor(number of full spindle revolutions in the *position* sampled on positive
edge) plus *angle*/360 (the fractional revolution) +1/-1/0 depending on *mode*.

The *mode* pin is interpreted as follows:

* 0: the spindle rotates in the direction with the lesser angle,
which may be clockwise or counterclockwise.
* 1: the spindle rotates always rotates clockwise to the new angle.
* 2: the spindle rotates always rotates counterclockwise to the new angle.

=== HAL USAGE

On *spindle.N.orient* disconnect the spindle control and connect to the orient-pid
loop:

[source,hal]
----
loadrt orient names=orient
loadrt pid names=orient-pid
net orient-angle spindle.N.orient-angle orient.angle
net orient-mode spindle.N.orient-mode orient.mode
net orient-enable spindle.N.orient orient.enable orient-pid.enable
net spindle-in-pos orient.is-oriented spindle.N.is-oriented
net spindle-pos encoder.position orient.position orient-pid.feedback
net orient-command orient.command orient-pid.command
----

""";

license "GPL";
;;
#include <rtapi_math.h>

FUNCTION(_) {

    double target_angle;
    double latched_position;
    is_oriented = 0; // spindle.is-oriented inhibits spindle.orient
    if (enable) {
       if (enable ^ last_enable) {     // positive edge on enable
           is_oriented = 0;
            debounce = 0;
            latched_position = position; // sample now
            target_angle =  angle/360.0;
            switch (mode) {
            case 0: // shortest move
                command = floor(latched_position+0.5-target_angle) + target_angle;
                break;
            case 1: // always cw
                command = ceil(latched_position-target_angle)  + target_angle;
                break;
            case 2: // always ccw
                command = floor(latched_position-target_angle) + target_angle ;
                break;
            }
       }
       poserr = (position - command) * 360.0;
       debounce += (fabs(poserr) < tolerance && debounce <=100);
       is_oriented = (debounce > 100);
    }
    last_enable = enable;
}

